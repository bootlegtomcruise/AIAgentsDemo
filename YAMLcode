import json
import boto3

# Initialize AWS clients for S3, Textract, and Bedrock
s3_client = boto3.client('s3')
textract_client = boto3.client('textract')
bedrock_client = boto3.client('bedrock-runtime')

def lambda_handler(event, context):
    # Extract bucket and object key from the event
    bucket = event['Records'][0]['s3']['bucket']['name']
    key = event['Records'][0]['s3']['object']['key']
    
    # Check if the document format is supported
    if not key.lower().endswith(('.pdf', '.png', '.jpeg', '.jpg', '.tiff')):
        error_message = f"Unsupported document format for {key}. Supported formats are PDF, PNG, JPEG, JPG, and TIFF."
        print(error_message)
        return {
            'statusCode': 400,
            'body': json.dumps(error_message)
        }

    # Extract text from the document in S3 using AWS Textract
    text = extract_text_from_document(bucket, key)

    # Generate summary using Claude 3.5 Sonnet on Bedrock
    summary = generate_summary_with_claude(text)

    # Save summary back to S3
    summary_key = key.rsplit('.', 1)[0] + '-summary.txt'
    s3_client.put_object(Body=summary, Bucket=bucket, Key=summary_key)

    return {
        'statusCode': 200,
        'body': json.dumps(f'Summary saved as {summary_key}')
    }

def extract_text_from_document(bucket, key):
    # Use AWS Textract to detect text from document stored in S3 (DetectDocumentText operation)
    response = textract_client.detect_document_text(
        Document={'S3Object': {'Bucket': bucket, 'Name': key}}
    )
    
    # Extract lines of text from the Textract response
    text = ''
    for block in response['Blocks']:
        if block['BlockType'] == 'LINE':
            text += block['Text'] + '\n'
    print(f"Extracted text: {text}")  # Log extracted text for debugging
    return text

def generate_summary_with_claude(text):
    # Replace with the actual Bedrock model ID if needed
    model_id = 'us.anthropic.claude-3-5-sonnet-20240620-v1:0'
    print(f"Text to summarize: {text}")  # Log text to be summarized
    response = bedrock_client.invoke_model(
        modelId=model_id,
        body=json.dumps({"input_text": text, "parameters": {"max_tokens": 500, "temperature": 0.2}})
    )
    
    # Extract the summary from the response
    response_body = json.loads(response['body'].read().decode('utf-8'))
    print(f"Claude response: {response_body}")  # Log Claude response for debugging
    summary = response_body.get('summary', 'No summary returned')
    return summary
